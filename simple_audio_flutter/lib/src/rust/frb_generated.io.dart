// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PlayerPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_PlayerPtr;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw);

  @protected
  Player dco_decode_RustOpaque_Player(dynamic raw);

  @protected
  RustStreamSink<Duration> dco_decode_StreamSink_Chrono_Duration_Sse(
      dynamic raw);

  @protected
  RustStreamSink<Error> dco_decode_StreamSink_error_Sse(dynamic raw);

  @protected
  RustStreamSink<PlaybackState> dco_decode_StreamSink_playback_state_Sse(
      dynamic raw);

  @protected
  RustStreamSink<ProgressState> dco_decode_StreamSink_progress_state_Sse(
      dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  PlayerWrapper dco_decode_box_autoadd_player_wrapper(dynamic raw);

  @protected
  Error dco_decode_error(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  PlaybackState dco_decode_playback_state(dynamic raw);

  @protected
  PlayerWrapper dco_decode_player_wrapper(dynamic raw);

  @protected
  ProgressState dco_decode_progress_state(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer);

  @protected
  Player sse_decode_RustOpaque_Player(SseDeserializer deserializer);

  @protected
  RustStreamSink<Duration> sse_decode_StreamSink_Chrono_Duration_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<Error> sse_decode_StreamSink_error_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<PlaybackState> sse_decode_StreamSink_playback_state_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<ProgressState> sse_decode_StreamSink_progress_state_Sse(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  PlayerWrapper sse_decode_box_autoadd_player_wrapper(
      SseDeserializer deserializer);

  @protected
  Error sse_decode_error(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  PlaybackState sse_decode_playback_state(SseDeserializer deserializer);

  @protected
  PlayerWrapper sse_decode_player_wrapper(SseDeserializer deserializer);

  @protected
  ProgressState sse_decode_progress_state(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_Player(Player self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_Chrono_Duration_Sse(
      RustStreamSink<Duration> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_error_Sse(
      RustStreamSink<Error> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_playback_state_Sse(
      RustStreamSink<PlaybackState> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_progress_state_Sse(
      RustStreamSink<ProgressState> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_player_wrapper(
      PlayerWrapper self, SseSerializer serializer);

  @protected
  void sse_encode_error(Error self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_playback_state(PlaybackState self, SseSerializer serializer);

  @protected
  void sse_encode_player_wrapper(PlayerWrapper self, SseSerializer serializer);

  @protected
  void sse_encode_progress_state(ProgressState self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  void rust_arc_increment_strong_count_RustOpaque_Player(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_Player(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_PlayerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'frbgen_simple_audio_rust_arc_increment_strong_count_RustOpaque_Player');
  late final _rust_arc_increment_strong_count_RustOpaque_Player =
      _rust_arc_increment_strong_count_RustOpaque_PlayerPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_Player(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_Player(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_PlayerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'frbgen_simple_audio_rust_arc_decrement_strong_count_RustOpaque_Player');
  late final _rust_arc_decrement_strong_count_RustOpaque_Player =
      _rust_arc_decrement_strong_count_RustOpaque_PlayerPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}
