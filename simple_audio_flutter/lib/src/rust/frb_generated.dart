// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.0';

  @override
  int get rustContentHash => 1207912095;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'simple_audio_flutter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiApiPlayerWrapperClearPreload(
      {required PlayerWrapper that});

  Future<void> crateApiApiPlayerWrapperDispose();

  Stream<Error> crateApiApiPlayerWrapperErrorStream();

  Future<bool> crateApiApiPlayerWrapperIsLooping({required PlayerWrapper that});

  Future<bool> crateApiApiPlayerWrapperIsNormalizing(
      {required PlayerWrapper that});

  Future<bool> crateApiApiPlayerWrapperIsPreloaded(
      {required PlayerWrapper that});

  Future<void> crateApiApiPlayerWrapperLoopPlayback(
      {required PlayerWrapper that, required bool shouldLoop});

  Future<PlayerWrapper> crateApiApiPlayerWrapperNew();

  Future<void> crateApiApiPlayerWrapperNormalizeVolume(
      {required PlayerWrapper that, required bool shouldNormalize});

  Future<void> crateApiApiPlayerWrapperOpen(
      {required PlayerWrapper that,
      required String path,
      required bool autoplay,
      String? mimeType});

  Future<void> crateApiApiPlayerWrapperPause({required PlayerWrapper that});

  Future<void> crateApiApiPlayerWrapperPlay({required PlayerWrapper that});

  Future<void> crateApiApiPlayerWrapperPlayPreload(
      {required PlayerWrapper that});

  Stream<Duration> crateApiApiPlayerWrapperPlaybackStartedStream();

  Future<PlaybackState> crateApiApiPlayerWrapperPlaybackState(
      {required PlayerWrapper that});

  Stream<PlaybackState> crateApiApiPlayerWrapperPlaybackStateStream();

  Future<void> crateApiApiPlayerWrapperPreload(
      {required PlayerWrapper that, required String path, String? mimeType});

  Future<ProgressState> crateApiApiPlayerWrapperProgress(
      {required PlayerWrapper that});

  Stream<ProgressState> crateApiApiPlayerWrapperProgressStateStream();

  Future<void> crateApiApiPlayerWrapperSeek(
      {required PlayerWrapper that, required Duration position});

  Future<void> crateApiApiPlayerWrapperSetVolume(
      {required PlayerWrapper that, required double volume});

  Future<void> crateApiApiPlayerWrapperStop({required PlayerWrapper that});

  Future<double> crateApiApiPlayerWrapperVolume({required PlayerWrapper that});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Player;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Player;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PlayerPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiApiPlayerWrapperClearPreload(
      {required PlayerWrapper that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 1, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperClearPreloadConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperClearPreloadConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_clear_preload",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiApiPlayerWrapperDispose() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 2, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperDisposeConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperDisposeConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_dispose",
        argNames: [],
      );

  @override
  Stream<Error> crateApiApiPlayerWrapperErrorStream() {
    final stream = RustStreamSink<Error>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_error_Sse(stream, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer,
                funcId: 3, port: port_);
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiApiPlayerWrapperErrorStreamConstMeta,
          argValues: [stream],
          apiImpl: this,
        ),
      ),
    );
    return stream.stream;
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperErrorStreamConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_error_stream",
        argNames: ["stream"],
      );

  @override
  Future<bool> crateApiApiPlayerWrapperIsLooping(
      {required PlayerWrapper that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 4, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperIsLoopingConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperIsLoopingConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_is_looping",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiApiPlayerWrapperIsNormalizing(
      {required PlayerWrapper that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 5, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperIsNormalizingConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperIsNormalizingConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_is_normalizing",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiApiPlayerWrapperIsPreloaded(
      {required PlayerWrapper that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 6, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperIsPreloadedConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperIsPreloadedConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_is_preloaded",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiApiPlayerWrapperLoopPlayback(
      {required PlayerWrapper that, required bool shouldLoop}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          sse_encode_bool(shouldLoop, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 7, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperLoopPlaybackConstMeta,
        argValues: [that, shouldLoop],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperLoopPlaybackConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_loop_playback",
        argNames: ["that", "shouldLoop"],
      );

  @override
  Future<PlayerWrapper> crateApiApiPlayerWrapperNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 8, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_player_wrapper,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperNewConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_new",
        argNames: [],
      );

  @override
  Future<void> crateApiApiPlayerWrapperNormalizeVolume(
      {required PlayerWrapper that, required bool shouldNormalize}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          sse_encode_bool(shouldNormalize, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 9, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperNormalizeVolumeConstMeta,
        argValues: [that, shouldNormalize],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperNormalizeVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_normalize_volume",
        argNames: ["that", "shouldNormalize"],
      );

  @override
  Future<void> crateApiApiPlayerWrapperOpen(
      {required PlayerWrapper that,
      required String path,
      required bool autoplay,
      String? mimeType}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          sse_encode_String(path, serializer);
          sse_encode_bool(autoplay, serializer);
          sse_encode_opt_String(mimeType, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 10, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_error,
        ),
        constMeta: kCrateApiApiPlayerWrapperOpenConstMeta,
        argValues: [that, path, autoplay, mimeType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperOpenConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_open",
        argNames: ["that", "path", "autoplay", "mimeType"],
      );

  @override
  Future<void> crateApiApiPlayerWrapperPause({required PlayerWrapper that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 11, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperPauseConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperPauseConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_pause",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiApiPlayerWrapperPlay({required PlayerWrapper that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 12, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperPlayConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperPlayConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_play",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiApiPlayerWrapperPlayPreload(
      {required PlayerWrapper that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 13, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperPlayPreloadConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperPlayPreloadConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_play_preload",
        argNames: ["that"],
      );

  @override
  Stream<Duration> crateApiApiPlayerWrapperPlaybackStartedStream() {
    final stream = RustStreamSink<Duration>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_Chrono_Duration_Sse(stream, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer,
                funcId: 14, port: port_);
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiApiPlayerWrapperPlaybackStartedStreamConstMeta,
          argValues: [stream],
          apiImpl: this,
        ),
      ),
    );
    return stream.stream;
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperPlaybackStartedStreamConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_playback_started_stream",
        argNames: ["stream"],
      );

  @override
  Future<PlaybackState> crateApiApiPlayerWrapperPlaybackState(
      {required PlayerWrapper that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 15, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_playback_state,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperPlaybackStateConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperPlaybackStateConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_playback_state",
        argNames: ["that"],
      );

  @override
  Stream<PlaybackState> crateApiApiPlayerWrapperPlaybackStateStream() {
    final stream = RustStreamSink<PlaybackState>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_playback_state_Sse(stream, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer,
                funcId: 16, port: port_);
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiApiPlayerWrapperPlaybackStateStreamConstMeta,
          argValues: [stream],
          apiImpl: this,
        ),
      ),
    );
    return stream.stream;
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperPlaybackStateStreamConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_playback_state_stream",
        argNames: ["stream"],
      );

  @override
  Future<void> crateApiApiPlayerWrapperPreload(
      {required PlayerWrapper that, required String path, String? mimeType}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          sse_encode_String(path, serializer);
          sse_encode_opt_String(mimeType, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 17, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_error,
        ),
        constMeta: kCrateApiApiPlayerWrapperPreloadConstMeta,
        argValues: [that, path, mimeType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperPreloadConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_preload",
        argNames: ["that", "path", "mimeType"],
      );

  @override
  Future<ProgressState> crateApiApiPlayerWrapperProgress(
      {required PlayerWrapper that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 18, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_progress_state,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperProgressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperProgressConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_progress",
        argNames: ["that"],
      );

  @override
  Stream<ProgressState> crateApiApiPlayerWrapperProgressStateStream() {
    final stream = RustStreamSink<ProgressState>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_progress_state_Sse(stream, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer,
                funcId: 19, port: port_);
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiApiPlayerWrapperProgressStateStreamConstMeta,
          argValues: [stream],
          apiImpl: this,
        ),
      ),
    );
    return stream.stream;
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperProgressStateStreamConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_progress_state_stream",
        argNames: ["stream"],
      );

  @override
  Future<void> crateApiApiPlayerWrapperSeek(
      {required PlayerWrapper that, required Duration position}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          sse_encode_Chrono_Duration(position, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 20, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperSeekConstMeta,
        argValues: [that, position],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperSeekConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_seek",
        argNames: ["that", "position"],
      );

  @override
  Future<void> crateApiApiPlayerWrapperSetVolume(
      {required PlayerWrapper that, required double volume}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          sse_encode_f_32(volume, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 21, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperSetVolumeConstMeta,
        argValues: [that, volume],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperSetVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_set_volume",
        argNames: ["that", "volume"],
      );

  @override
  Future<void> crateApiApiPlayerWrapperStop({required PlayerWrapper that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 22, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperStopConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperStopConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_stop",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiApiPlayerWrapperVolume({required PlayerWrapper that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_player_wrapper(that, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer,
              funcId: 23, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiPlayerWrapperVolumeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiPlayerWrapperVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "player_wrapper_volume",
        argNames: ["that"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Player =>
          wire.rust_arc_increment_strong_count_RustOpaque_Player;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Player =>
          wire.rust_arc_decrement_strong_count_RustOpaque_Player;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeDuration(dco_decode_i_64(raw).toInt());
  }

  @protected
  Player dco_decode_RustOpaque_Player(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PlayerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<Duration> dco_decode_StreamSink_Chrono_Duration_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Error> dco_decode_StreamSink_error_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<PlaybackState> dco_decode_StreamSink_playback_state_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ProgressState> dco_decode_StreamSink_progress_state_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PlayerWrapper dco_decode_box_autoadd_player_wrapper(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_player_wrapper(raw);
  }

  @protected
  Error dco_decode_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Error_NetworkStream(
          dco_decode_String(raw[1]),
        );
      case 1:
        return Error_Decode(
          dco_decode_String(raw[1]),
        );
      case 2:
        return Error_Open(
          dco_decode_String(raw[1]),
        );
      case 3:
        return Error_Preload(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  PlaybackState dco_decode_playback_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PlaybackState.values[raw as int];
  }

  @protected
  PlayerWrapper dco_decode_player_wrapper(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PlayerWrapper(
      internal: dco_decode_RustOpaque_Player(arr[0]),
    );
  }

  @protected
  ProgressState dco_decode_progress_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ProgressState(
      position: dco_decode_Chrono_Duration(arr[0]),
      duration: dco_decode_Chrono_Duration(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return Duration(microseconds: inner.toInt());
  }

  @protected
  Player sse_decode_RustOpaque_Player(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PlayerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<Duration> sse_decode_StreamSink_Chrono_Duration_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Error> sse_decode_StreamSink_error_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<PlaybackState> sse_decode_StreamSink_playback_state_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ProgressState> sse_decode_StreamSink_progress_state_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  PlayerWrapper sse_decode_box_autoadd_player_wrapper(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_player_wrapper(deserializer));
  }

  @protected
  Error sse_decode_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return Error_NetworkStream(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Decode(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Open(var_field0);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return Error_Preload(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlaybackState sse_decode_playback_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PlaybackState.values[inner];
  }

  @protected
  PlayerWrapper sse_decode_player_wrapper(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_internal = sse_decode_RustOpaque_Player(deserializer);
    return PlayerWrapper(internal: var_internal);
  }

  @protected
  ProgressState sse_decode_progress_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_position = sse_decode_Chrono_Duration(deserializer);
    var var_duration = sse_decode_Chrono_Duration(deserializer);
    return ProgressState(position: var_position, duration: var_duration);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(PlatformInt64Util.from(self.inMicroseconds), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Player(Player self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PlayerImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_Chrono_Duration_Sse(
      RustStreamSink<Duration> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_Chrono_Duration,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_error_Sse(
      RustStreamSink<Error> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_error,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_playback_state_Sse(
      RustStreamSink<PlaybackState> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_playback_state,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_progress_state_Sse(
      RustStreamSink<ProgressState> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_progress_state,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_player_wrapper(
      PlayerWrapper self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_player_wrapper(self, serializer);
  }

  @protected
  void sse_encode_error(Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Error_NetworkStream(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case Error_Decode(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case Error_Open(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case Error_Preload(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_playback_state(PlaybackState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_player_wrapper(PlayerWrapper self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Player(self.internal, serializer);
  }

  @protected
  void sse_encode_progress_state(ProgressState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Duration(self.position, serializer);
    sse_encode_Chrono_Duration(self.duration, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class PlayerImpl extends RustOpaque implements Player {
  // Not to be used by end users
  PlayerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PlayerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Player,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Player,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PlayerPtr,
  );
}
